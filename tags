!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/fb09e05b/
$FZF_DEFAULT_COMMAND	plug-config/fzf.vim	/^let $FZF_DEFAULT_COMMAND="rg --files --hidden"$/;"	v
$FZF_DEFAULT_OPTS	plug-config/fzf.vim	/^let $FZF_DEFAULT_OPTS = '--layout=reverse --info=inline'$/;"	v
0	coc-settings.json	/^    "<cr>": ["expandable?", "expand", "open"],$/;"	s	array:explorer.keyMappings.<cr>
0	coc-settings.json	/^    "css",$/;"	s	array:coc.preferences.formatOnSaveFiletypes
0	coc-settings.json	/^  "snippets.ultisnips.directories": ["UltiSnips", "~\/.config\/nvim\/utils\/snips"],$/;"	s	array:snippets.ultisnips.directories
1	coc-settings.json	/^    "<cr>": ["expandable?", "expand", "open"],$/;"	s	array:explorer.keyMappings.<cr>
1	coc-settings.json	/^    "markdown",$/;"	s	array:coc.preferences.formatOnSaveFiletypes
1	coc-settings.json	/^  "snippets.ultisnips.directories": ["UltiSnips", "~\/.config\/nvim\/utils\/snips"],$/;"	s	array:snippets.ultisnips.directories
2	coc-settings.json	/^    "<cr>": ["expandable?", "expand", "open"],$/;"	s	array:explorer.keyMappings.<cr>
2	coc-settings.json	/^    "javascript",$/;"	s	array:coc.preferences.formatOnSaveFiletypes
3	coc-settings.json	/^    "graphql",$/;"	s	array:coc.preferences.formatOnSaveFiletypes
4	coc-settings.json	/^    "html",$/;"	s	array:coc.preferences.formatOnSaveFiletypes
5	coc-settings.json	/^    "yaml",$/;"	s	array:coc.preferences.formatOnSaveFiletypes
6	coc-settings.json	/^    "json",$/;"	s	array:coc.preferences.formatOnSaveFiletypes
7	coc-settings.json	/^    "python"$/;"	s	array:coc.preferences.formatOnSaveFiletypes
<	keys/mappins.vim	/^vnoremap < <gv$/;"	m
<C-Q>	keys/mappins.vim	/^nnoremap <C-Q> :wq!<CR>$/;"	m
<C-c>	keys/mappins.vim	/^nnoremap <C-c> <Esc>$/;"	m
<C-f>	plug-config/fzf.vim	/^map <C-f> :Files<CR>$/;"	m
<C-h>	keys/mappins.vim	/^nnoremap <C-h> <C-w>h$/;"	m
<C-j>	keys/mappins.vim	/^nnoremap <C-j> <C-w>j$/;"	m
<C-j>	plug-config/snippets.vim	/^imap <C-j> <Plug>(coc-snippets-expand-jump)$/;"	m
<C-j>	plug-config/snippets.vim	/^vmap <C-j> <Plug>(coc-snippets-select)$/;"	m
<C-k>	keys/mappins.vim	/^nnoremap <C-k> <C-w>k$/;"	m
<C-l>	keys/mappins.vim	/^nnoremap <C-l> <C-w>l$/;"	m
<C-l>	plug-config/snippets.vim	/^imap <C-l> <Plug>(coc-snippets-expand)$/;"	m
<C-s>	keys/mappins.vim	/^nnoremap <C-s> :w<CR>$/;"	m
<C-s>	plug-config/coc.vim	/^nmap <silent> <C-s> <Plug>(coc-range-select)$/;"	m
<C-s>	plug-config/coc.vim	/^xmap <silent> <C-s> <Plug>(coc-range-select)$/;"	m
<F7>	keys/mappins.vim	/^map <F7> gg=G$/;"	m
<Leader>O	keys/mappins.vim	/^nnoremap <Leader>O O<Esc>^Da$/;"	m
<Leader>o	keys/mappins.vim	/^nnoremap <Leader>o o<Esc>^Da$/;"	m
<M-h>	keys/mappins.vim	/^nnoremap <M-h>    :vertical resize -2<CR>$/;"	m
<M-j>	keys/mappins.vim	/^nnoremap <M-j>    :resize -2<CR>$/;"	m
<M-k>	keys/mappins.vim	/^nnoremap <M-k>    :resize +2<CR>$/;"	m
<M-l>	keys/mappins.vim	/^nnoremap <M-l>    :vertical resize +2<CR>$/;"	m
<S-TAB>	keys/mappins.vim	/^nnoremap <S-TAB> :bprevious<CR>$/;"	m
<S-TAB>	plug-config/coc.vim	/^inoremap <expr><S-TAB> pumvisible() ? "\\<C-p>" : "\\<C-h>"$/;"	m
<SPACE>	general/settings.vim	/^nnoremap <SPACE> <Nop>$/;"	m
<TAB>	keys/mappins.vim	/^inoremap <expr><TAB> pumvisible() ? "\\<C-n>" : "\\<TAB>"$/;"	m
<TAB>	keys/mappins.vim	/^nnoremap <TAB> :bnext<CR>$/;"	m
<TAB>	plug-config/coc.vim	/^inoremap <silent><expr> <TAB>$/;"	m
<c-@>	plug-config/coc.vim	/^  inoremap <silent><expr> <c-@> coc#refresh()$/;"	m
<c-j>	keys/mappins.vim	/^inoremap <expr> <c-j> ("\\<C-n>")$/;"	m
<c-k>	keys/mappins.vim	/^inoremap <expr> <c-k> ("\\<C-p>")$/;"	m
<c-space>	plug-config/coc.vim	/^  inoremap <silent><expr> <c-space> coc#refresh()$/;"	m
<c-u>	keys/mappins.vim	/^inoremap <c-u> <ESC>viwUi$/;"	m
<c-u>	keys/mappins.vim	/^nnoremap <c-u> viwU<Esc>$/;"	m
<cr>	coc-settings.json	/^    "<cr>": ["expandable?", "expand", "open"],$/;"	a	object:explorer.keyMappings
<cr>	plug-config/coc.vim	/^  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\\<C-y>" : "\\<C-g>u\\<CR>"$/;"	m
<cr>	plug-config/coc.vim	/^  inoremap <expr> <cr> pumvisible() ? "\\<C-y>" : "\\<C-g>u\\<CR>"$/;"	m
<leader>	keys/which-key.vim	/^nnoremap <silent> <leader> :silent WhichKey '<Space>'<CR>$/;"	m
<leader>	keys/which-key.vim	/^vnoremap <silent> <leader> :silent <c-u> :silent WhichKeyVisual '<Space>'<CR>$/;"	m
<leader>a	plug-config/coc.vim	/^nmap <leader>a  <Plug>(coc-codeaction-selected)$/;"	m
<leader>a	plug-config/coc.vim	/^xmap <leader>a  <Plug>(coc-codeaction-selected)$/;"	m
<leader>ac	plug-config/coc.vim	/^nmap <leader>ac  <Plug>(coc-codeaction)$/;"	m
<leader>f	plug-config/coc.vim	/^nmap <leader>f  <Plug>(coc-format-selected)$/;"	m
<leader>f	plug-config/coc.vim	/^xmap <leader>f  <Plug>(coc-format-selected)$/;"	m
<leader>g	plug-config/fzf.vim	/^nnoremap <leader>g :Rg<CR>$/;"	m
<leader>gJ	plug-config/signify.vim	/^nmap <leader>gJ 9999<leader>gJ$/;"	m
<leader>gK	plug-config/signify.vim	/^nmap <leader>gK 9999<leader>gk$/;"	m
<leader>gg	plug-config/fugitive.vim	/^nmap <leader>gg :diffput \/\/2<CR>$/;"	m
<leader>gh	plug-config/fugitive.vim	/^nmap <leader>gh :diffput \/\/3<CR>$/;"	m
<leader>gj	plug-config/signify.vim	/^nmap <leader>gj <plug>(signify-next-hunk)$/;"	m
<leader>gk	plug-config/signify.vim	/^nmap <leader>gk <plug>(signify-prev-hunk)$/;"	m
<leader>gs	plug-config/fugitive.vim	/^nmap <leader>gs :G<CR>$/;"	m
<leader>m	plug-config/fzf.vim	/^nnoremap <leader>m :Marks<CR>$/;"	m
<leader>n	keys/mappins.vim	/^nnoremap <leader>n :noh<CR>$/;"	m
<leader>qf	plug-config/coc.vim	/^nmap <leader>qf  <Plug>(coc-fix-current)$/;"	m
<leader>rn	plug-config/coc.vim	/^nmap <leader>rn <Plug>(coc-rename)$/;"	m
<leader>t	plug-config/fzf.vim	/^nnoremap <leader>t :Tags<CR>$/;"	m
<space>a	plug-config/coc.vim	/^nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>$/;"	m
<space>c	plug-config/coc.vim	/^nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>$/;"	m
<space>e	plug-config/coc.vim	/^nmap <space>e :CocCommand explorer<CR>$/;"	m
<space>e	plug-config/coc.vim	/^nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>$/;"	m
<space>f	plug-config/coc.vim	/^nmap <space>f :CocCommand explorer --preset floating<CR>$/;"	m
<space>j	plug-config/coc.vim	/^nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>$/;"	m
<space>k	plug-config/coc.vim	/^nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>$/;"	m
<space>o	plug-config/coc.vim	/^nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>$/;"	m
<space>p	plug-config/coc.vim	/^nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>$/;"	m
<space>r	plug-config/rnvimr.vim	/^nmap <space>r :RnvimrToggle<CR>$/;"	m
<space>s	plug-config/coc.vim	/^nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>$/;"	m
>	keys/mappins.vim	/^vnoremap > >gv$/;"	m
Files	plug-config/fzf.vim	/^command! -bang -nargs=? -complete=dir Files$/;"	c
Fold	plug-config/coc.vim	/^command! -nargs=? Fold :call     CocAction('fold', <f-args>)$/;"	c
Format	plug-config/coc.vim	/^command! -nargs=0 Format :call CocAction('format')$/;"	c
GGrep	plug-config/fzf.vim	/^command! -bang -nargs=* GGrep$/;"	c
K	plug-config/coc.vim	/^nnoremap <silent> K :call <SID>show_documentation()<CR>$/;"	m
OR	plug-config/coc.vim	/^command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')$/;"	c
RG	plug-config/fzf.vim	/^command! -nargs=* -bang RG call RipgrepFzf(<q-args>, <bang>0)$/;"	c
Rg	plug-config/fzf.vim	/^command! -bang -nargs=* Rg$/;"	c
RipgrepFzf	plug-config/fzf.vim	/^function! RipgrepFzf(query, fullscreen)$/;"	f
Vim-Configs	README.md	/^# Vim-Configs$/;"	c
[g	plug-config/coc.vim	/^nmap <silent> [g <Plug>(coc-diagnostic-prev)$/;"	m
]g	plug-config/coc.vim	/^nmap <silent> ]g <Plug>(coc-diagnostic-next)$/;"	m
ac	plug-config/coc.vim	/^omap ac <Plug>(coc-classobj-a)$/;"	m
ac	plug-config/coc.vim	/^xmap ac <Plug>(coc-classobj-a)$/;"	m
af	plug-config/coc.vim	/^omap af <Plug>(coc-funcobj-a)$/;"	m
af	plug-config/coc.vim	/^xmap af <Plug>(coc-funcobj-a)$/;"	m
clangd.path	coc-settings.json	/^  "clangd.path": "\/home\/sebastian\/.config\/coc\/extensions\/coc-clangd-data\/install\/10.0.0\//;"	s
coc.preferences.formatOnSaveFiletypes	coc-settings.json	/^  "coc.preferences.formatOnSaveFiletypes": [$/;"	a
colorset	themes/onedark.vim	/^  augroup colorset$/;"	a
css_fn	lua/plug-colorizer.lua	/^	  css_fn   = true;         -- Enable all CSS *functions*: rgb_fn, hsl_fn$/;"	f
explorer.icon.enableNerdfont	coc-settings.json	/^  "explorer.icon.enableNerdfont": true,$/;"	b
explorer.icon.enableVimDevicons	coc-settings.json	/^  "explorer.icon.enableVimDevicons": false,$/;"	b
explorer.keyMappings	coc-settings.json	/^  "explorer.keyMappings": {$/;"	o
explorer.previewAction.onHover	coc-settings.json	/^  "explorer.previewAction.onHover": false,$/;"	b
g:airline#extensions#tabline#enabled	themes/airline.vim	/^let g:airline#extensions#tabline#enabled = 1$/;"	v
g:airline#extensions#tabline#left_alt_sep	themes/airline.vim	/^let g:airline#extensions#tabline#left_alt_sep = ''$/;"	v
g:airline#extensions#tabline#left_sep	themes/airline.vim	/^let g:airline#extensions#tabline#left_sep = ''$/;"	v
g:airline#extensions#tabline#right_alt_sep	themes/airline.vim	/^let g:airline#extensions#tabline#right_alt_sep = ''$/;"	v
g:airline#extensions#tabline#right_sep	themes/airline.vim	/^let g:airline#extensions#tabline#right_sep = ''$/;"	v
g:airline_left_sep	themes/airline.vim	/^let g:airline_left_sep = ''$/;"	v
g:airline_powerline_fonts	themes/airline.vim	/^let g:airline_powerline_fonts = 1$/;"	v
g:airline_right_sep	themes/airline.vim	/^let g:airline_right_sep = ''$/;"	v
g:airline_theme	themes/airline.vim	/^let g:airline_theme = 'onedark'$/;"	v
g:coc_explorer_global_presets	plug-config/coc.vim	/^let g:coc_explorer_global_presets = {$/;"	v
g:coc_global_extensions	plug-config/coc.vim	/^let g:coc_global_extensions = ['coc-emmet', 'coc-css', 'coc-html', 'coc-json', 'coc-prettier', '/;"	v
g:coc_snippet_next	plug-config/snippets.vim	/^let g:coc_snippet_next = '<c-j>'$/;"	v
g:coc_snippet_prev	plug-config/snippets.vim	/^let g:coc_snippet_prev = '<c-k>'$/;"	v
g:floaterm_autoclose	plug-config/floaterm.vim	/^let g:floaterm_autoclose=1$/;"	v
g:floaterm_autoinsert	plug-config/floaterm.vim	/^let g:floaterm_autoinsert=1$/;"	v
g:floaterm_gitcommit	plug-config/floaterm.vim	/^let g:floaterm_gitcommit='floaterm'$/;"	v
g:floaterm_height	plug-config/floaterm.vim	/^let g:floaterm_height=0.8$/;"	v
g:floaterm_keymap_new	plug-config/floaterm.vim	/^let g:floaterm_keymap_new    = '<F4>'$/;"	v
g:floaterm_keymap_next	plug-config/floaterm.vim	/^let g:floaterm_keymap_next   = '<F2>'$/;"	v
g:floaterm_keymap_prev	plug-config/floaterm.vim	/^let g:floaterm_keymap_prev   = '<F3>'$/;"	v
g:floaterm_keymap_toggle	plug-config/floaterm.vim	/^let g:floaterm_keymap_toggle = '<F1>'$/;"	v
g:floaterm_width	plug-config/floaterm.vim	/^let g:floaterm_width=0.8$/;"	v
g:floaterm_wintitle	plug-config/floaterm.vim	/^let g:floaterm_wintitle=0$/;"	v
g:fzf_action	plug-config/fzf.vim	/^let g:fzf_action = {$/;"	v
g:fzf_colors	plug-config/fzf.vim	/^let g:fzf_colors =$/;"	v
g:fzf_history_dir	plug-config/fzf.vim	/^let g:fzf_history_dir = '~\/.local\/share\/fzf-history'$/;"	v
g:fzf_layout	plug-config/fzf.vim	/^let g:fzf_layout = {'up':'~90%', 'window': { 'width': 0.8, 'height': 0.8,'yoffset':0.5,'xoffset'/;"	v
g:fzf_tags_command	plug-config/fzf.vim	/^let g:fzf_tags_command = 'ctags -R'$/;"	v
g:onedark_hide_endofbuffer	themes/onedark.vim	/^let g:onedark_hide_endofbuffer=1$/;"	v
g:onedark_termcolors	themes/onedark.vim	/^let g:onedark_termcolors=256$/;"	v
g:onedark_terminal_italics	themes/onedark.vim	/^let g:onedark_terminal_italics=1$/;"	v
g:pydocstring_formatter	plug-config/pydocstring.vim	/^let g:pydocstring_formatter = 'google'$/;"	v
g:rainbow#max_level	plug-config/rainbow.vim	/^let g:rainbow#max_level = 16$/;"	v
g:rainbow#pairs	plug-config/rainbow.vim	/^let g:rainbow#pairs = [['(', ')'], ['[', ']'], ['{', '}']]$/;"	v
g:rnvimr_ex_enable	plug-config/rnvimr.vim	/^let g:rnvimr_ex_enable = 1$/;"	v
g:signify_sign_add	plug-config/signify.vim	/^let g:signify_sign_add               = '+'$/;"	v
g:signify_sign_change	plug-config/signify.vim	/^let g:signify_sign_change            = '~'$/;"	v
g:signify_sign_delete	plug-config/signify.vim	/^let g:signify_sign_delete            = '_'$/;"	v
g:signify_sign_delete_first_line	plug-config/signify.vim	/^let g:signify_sign_delete_first_line = '‾'$/;"	v
g:signify_sign_show_count	plug-config/signify.vim	/^let g:signify_sign_show_count = 0$/;"	v
g:signify_sign_show_text	plug-config/signify.vim	/^let g:signify_sign_show_text = 1$/;"	v
g:startify_change_to_vcs_root	plug-config/start-screen.vim	/^let g:startify_change_to_vcs_root = 1$/;"	v
g:startify_enable_special	plug-config/start-screen.vim	/^let g:startify_enable_special = 0$/;"	v
g:startify_fortune_use_unicode	plug-config/start-screen.vim	/^let g:startify_fortune_use_unicode = 1$/;"	v
g:startify_lists	plug-config/start-screen.vim	/^let g:startify_lists = [$/;"	v
g:startify_session_autoload	plug-config/start-screen.vim	/^let g:startify_session_autoload = 1$/;"	v
g:user_emmet_install_global	plug-config/emmet.vim	/^let g:user_emmet_install_global = 0$/;"	v
g:user_emmet_leader_key	plug-config/emmet.vim	/^let g:user_emmet_leader_key='<C-Z>' "Remap Ctrl-Y to Ctrl-Z$/;"	v
g:user_emmet_mode	plug-config/emmet.vim	/^let g:user_emmet_mode='a'    "enable all function in all mode.$/;"	v
g:user_emmet_mode	plug-config/emmet.vim	/^let g:user_emmet_mode='inv'  "enable all functions, which is equal to$/;"	v
g:user_emmet_mode	plug-config/emmet.vim	/^let g:user_emmet_mode='n'    "only enable normal mode functions.$/;"	v
g:which_key_map	keys/which-key.vim	/^let g:which_key_map =  {}$/;"	v
g:which_key_map	keys/which-key.vim	/^let g:which_key_map.b = {$/;"	v
g:which_key_map	keys/which-key.vim	/^let g:which_key_map.g = {$/;"	v
g:which_key_map	keys/which-key.vim	/^let g:which_key_map.l = {$/;"	v
g:which_key_map	keys/which-key.vim	/^let g:which_key_map.t = {$/;"	v
g:which_key_map	keys/which-key.vim	/^let g:which_key_map['S'] = [ ':Startify'                  , 'start screen' ]$/;"	v
g:which_key_map	keys/which-key.vim	/^let g:which_key_map['c␣'] = [ '<Plug>NERDCommenterToggle'  , 'comment' ]$/;"	v
g:which_key_map	keys/which-key.vim	/^let g:which_key_map['e'] = [ ':CocCommand explorer'       , 'explorer' ]$/;"	v
g:which_key_map	keys/which-key.vim	/^let g:which_key_map['f'] = [ ':Files'                     , 'search files' ]$/;"	v
g:which_key_map	keys/which-key.vim	/^let g:which_key_map['h'] = [ '<C-W>s'                     , 'split below']$/;"	v
g:which_key_map	keys/which-key.vim	/^let g:which_key_map['r'] = [ ':Ranger'                    , 'ranger' ]$/;"	v
g:which_key_map	keys/which-key.vim	/^let g:which_key_map['v'] = [ '<C-W>v'                     , 'split right']$/;"	v
g:which_key_sep	keys/which-key.vim	/^let g:which_key_sep = '→'$/;"	v
g:which_key_use_floating_win	keys/which-key.vim	/^let g:which_key_use_floating_win = 0$/;"	v
gd	plug-config/coc.vim	/^nmap <silent> gd <Plug>(coc-definition)$/;"	m
gi	plug-config/coc.vim	/^nmap <silent> gi <Plug>(coc-implementation)$/;"	m
gr	plug-config/coc.vim	/^nmap <silent> gr <Plug>(coc-references)$/;"	m
gy	plug-config/coc.vim	/^nmap <silent> gy <Plug>(coc-type-definition)$/;"	m
hsl_fn	lua/plug-colorizer.lua	/^	  hsl_fn   = true;         -- CSS hsl() and hsla() functions$/;"	f
ic	plug-config/coc.vim	/^omap ic <Plug>(coc-classobj-i)$/;"	m
ic	plug-config/coc.vim	/^xmap ic <Plug>(coc-classobj-i)$/;"	m
if	plug-config/coc.vim	/^omap if <Plug>(coc-funcobj-i)$/;"	m
if	plug-config/coc.vim	/^xmap if <Plug>(coc-funcobj-i)$/;"	m
mapleader	general/settings.vim	/^let mapleader = " "$/;"	v
mygroup	plug-config/coc.vim	/^augroup mygroup$/;"	a
prettier.tabWidth	coc-settings.json	/^  "prettier.tabWidth": 4$/;"	n
python.linting.pylintEnabled	coc-settings.json	/^  "python.linting.pylintEnabled": true,$/;"	b
rgb_fn	lua/plug-colorizer.lua	/^	  rgb_fn   = true;         -- CSS rgb() and rgba() functions$/;"	f
s:check_back_space	plug-config/coc.vim	/^function! s:check_back_space() abort$/;"	f
s:show_documentation	plug-config/coc.vim	/^function! s:show_documentation()$/;"	f
s:white	themes/onedark.vim	/^    let s:white = { "gui": "#ABB2BF", "cterm": "145", "cterm16" : "7" }$/;"	v
snippets.ultisnips.directories	coc-settings.json	/^  "snippets.ultisnips.directories": ["UltiSnips", "~\/.config\/nvim\/utils\/snips"],$/;"	a
v	coc-settings.json	/^    "v": "open:vsplit"$/;"	s	object:explorer.keyMappings
w!!	general/settings.vim	/^cmap w!! w !sudo tee %$/;"	m
